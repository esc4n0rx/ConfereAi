// lib/api/whatsapp.ts
export interface WhatsAppMessage {
  numero: string
  mensagem: string
  checklistCodigo?: string 
}

export class WhatsAppAPI {
  private static getConfig() {
    const url = process.env.WHATSAPP_API_URL
    const token = process.env.WHATSAPP_API_KEY

    if (!url || !token) {
      // N√£o lan√ßa erro, apenas loga, para n√£o quebrar o fluxo se o whatsapp n√£o estiver configurado
      console.warn('Configura√ß√£o do WhatsApp n√£o encontrada. As notifica√ß√µes n√£o ser√£o enviadas.');
      return null;
    }

    return { url, token }
  }

  private static formatPhoneNumber(numero: string): string {
    let cleanNumber = numero.replace(/\D/g, '')
    if (!cleanNumber.startsWith('55')) {
      cleanNumber = '55' + cleanNumber
    }
    if (cleanNumber.length === 12 && !cleanNumber.substring(4, 5).includes('9')) {
      cleanNumber = cleanNumber.substring(0, 4) + '9' + cleanNumber.substring(4)
    }
    return cleanNumber
  }

  static async sendMessage(numero: string, mensagem: string, checklistCodigo?: string): Promise<boolean> {
    const config = this.getConfig();
    if (!config) return false; // Retorna se n√£o estiver configurado

    try {
      const { url, token } = config;
      const formattedNumber = this.formatPhoneNumber(numero)

      const response = await fetch(`${url}/enviar`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': token,
        },
        body: JSON.stringify({
          numero: formattedNumber,
          mensagem,
          checklistCodigo
        }),
      })

      const result = await response.json()
      
      if (!response.ok) {
        console.error('Erro na resposta da API WhatsApp:', result)
        throw new Error(`Erro na API WhatsApp: ${response.status} - ${result.erro || 'Erro desconhecido'}`)
      }

      return true
    } catch (error) {
      console.error('Erro ao enviar mensagem WhatsApp:', error)
      return false
    }
  }

  /**
   * Novo m√©todo para enviar notifica√ß√£o informativa.
   */
  static async sendChecklistNotification(
    managers: { nome: string; telefone: string }[],
    checklist: {
      codigo: string
      action: 'taking' | 'returning'
      employee_name: string
      equipment_name: string
      has_issues: boolean
      observations?: string
      device_timestamp: string
    }
  ): Promise<void> {
    const actionText = checklist.action === 'taking' ? 'RETIRADA' : 'DEVOLU√á√ÉO'
    const issuesText = checklist.has_issues ? '‚ö†Ô∏è COM PROBLEMAS' : '‚úÖ SEM PROBLEMAS'
    
    let message = `‚ÑπÔ∏è REGISTRO DE CHECKLIST\n\n`
    message += `O seguinte checklist foi registrado e aprovado automaticamente no sistema:\n\n`
    message += `üìã *C√≥digo:* ${checklist.codigo}\n`
    message += `üéØ *A√ß√£o:* ${actionText}\n`
    message += `üë§ *Funcion√°rio:* ${checklist.employee_name}\n`
    message += `üì¶ *Equipamento:* ${checklist.equipment_name}\n`
    message += `üìä *Status Reportado:* ${issuesText}\n`
    
    if (checklist.observations) {
      message += `üìù *Observa√ß√µes:* ${checklist.observations}\n`
    }
    
    message += `\nEsta √© uma mensagem informativa. Nenhuma a√ß√£o √© necess√°ria.`

    const promises = managers.map(manager => 
      this.sendMessage(manager.telefone, message, checklist.codigo)
    )

    await Promise.allSettled(promises)
  }

  // O restante dos m√©todos pode ser mantido para outras funcionalidades ou removido se n√£o for mais usado.
  // ... (manter o restante do c√≥digo do arquivo)
  static async notifyLateResponse(
    phoneNumber: string,
    checklistCode: string,
    alreadyApprovedBy: string,
    wasApproved: boolean,
    responseSource: 'web' | 'whatsapp' = 'whatsapp'
  ): Promise<void> {
    const statusText = wasApproved ? 'APROVADO' : 'REJEITADO'
    const icon = wasApproved ? '‚úÖ' : '‚ùå'
    const sourceText = responseSource === 'whatsapp' ? 'üì± WhatsApp' : 'üíª Sistema'
    
    const message = `‚ö†Ô∏è RESPOSTA N√ÉO PROCESSADA\n\n`
      + `üìã C√≥digo: ${checklistCode}\n`
      + `${icon} J√° foi ${statusText} por: ${alreadyApprovedBy}\n`
      + `üìç Respondido via: ${sourceText}\n\n`
      + `‚ÑπÔ∏è Sua resposta chegou ap√≥s a decis√£o j√° ter sido tomada.`
 
    try {
      await this.sendMessage(phoneNumber, message)
    } catch (error) {
      console.error('Erro ao enviar notifica√ß√£o de resposta tardia:', error)
    }
  }
 
  static async sendConfirmationMessage(
    phoneNumber: string,
    checklistCode: string,
    approved: boolean,
    managerName: string
  ): Promise<void> {
    const statusText = approved ? 'APROVA√á√ÉO' : 'REJEI√á√ÉO'
    const icon = approved ? '‚úÖ' : '‚ùå'
    
    const message = `${icon} ${statusText} REGISTRADA\n\n`
      + `üìã C√≥digo: ${checklistCode}\n`
      + `üë®‚Äçüíº Por: ${managerName}\n`
      + `‚è∞ Em: ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n\n`
      + `‚úÖ Sua decis√£o foi processada com sucesso!`
 
    try {
      await this.sendMessage(phoneNumber, message)
    } catch (error) {
      console.error('Erro ao enviar confirma√ß√£o:', error)
    }
  }

  static async notifyApprovalResponse(
    managers: { nome: string; telefone: string }[],
    approvedBy: string,
    checklist: {
      codigo: string
      employee_name: string
      equipment_name: string
      action: 'taking' | 'returning'
    },
    approved: boolean
  ): Promise<void> {
    const actionText = checklist.action === 'taking' ? 'retirada' : 'devolu√ß√£o'
    const statusText = approved ? 'APROVADA' : 'REJEITADA'
    const icon = approved ? '‚úÖ' : '‚ùå'
    
    const message = `${icon} CHECKLIST ${statusText}\n\n`
      + `üìã C√≥digo: ${checklist.codigo}\n`
      + `üë§ Funcion√°rio: ${checklist.employee_name}\n`
      + `üì¶ Equipamento: ${checklist.equipment_name}\n`
      + `üéØ A√ß√£o: ${actionText}\n`
      + `üë®‚Äçüíº ${statusText} por: ${approvedBy}\n\n`
      + `‚ÑπÔ∏è N√£o √© necess√°rio responder mais.`
 
    const promises = managers
      .filter(manager => manager.nome !== approvedBy)
      .map(manager => this.sendMessage(manager.telefone, message))
 
    await Promise.allSettled(promises)
  }
}
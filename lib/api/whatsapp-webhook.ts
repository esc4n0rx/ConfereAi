// lib/api/whatsapp-webhook.ts
import { createServerClient } from '@/lib/supabase/server'
import { ChecklistApprovalAPI } from './checklist-approval'

export interface WebhookResponse {
  success: boolean
  error?: string
  checklistCodigo?: string
  manager?: string
}

export class WhatsAppWebhookAPI {
  /**
   * Processa resposta de aprova√ß√£o recebida via WhatsApp
   */
  static async processApprovalResponse(
    phoneNumber: string,
    approved: boolean,
    timestamp?: string
  ): Promise<WebhookResponse> {
    try {
      const supabase = createServerClient()

      // Formatar n√∫mero para buscar no banco
      const formattedPhone = this.formatPhoneForSearch(phoneNumber)
      
      console.log(`üîç Buscando encarregado com telefone: ${formattedPhone}`)

      // Buscar encarregado pelo telefone
      const { data: manager, error: managerError } = await supabase
        .from('confereai_managers')
        .select('id, nome, telefone')
        .eq('telefone', formattedPhone)
        .eq('is_active', true)
        .single()

      if (managerError || !manager) {
        console.log('‚ùå Encarregado n√£o encontrado para o telefone:', formattedPhone)
        return {
          success: false,
          error: 'Encarregado n√£o encontrado para este n√∫mero'
        }
      }

      console.log(`‚úÖ Encarregado encontrado: ${manager.nome}`)

      // Buscar aprova√ß√£o pendente mais recente para este encarregado
      const { data: pendingApproval, error: approvalError } = await supabase
        .from('confereai_checklist_approvals')
        .select(`
          id,
          checklist_id,
          confereai_checklists!checklist_id(codigo)
        `)
        .eq('manager_id', manager.id)
        .eq('status', 'pending')
        .order('created_at', { ascending: false })
        .limit(1)
        .single()

      if (approvalError || !pendingApproval) {
        console.log('‚ùå Nenhuma aprova√ß√£o pendente encontrada para:', manager.nome)
        return {
          success: false,
          error: 'Nenhuma aprova√ß√£o pendente encontrada para este encarregado'
        }
      }

      const checklistCodigo = pendingApproval.confereai_checklists.codigo
      console.log(`üìã Processando aprova√ß√£o para checklist: ${checklistCodigo}`)

      // Processar a aprova√ß√£o usando a API existente
      await ChecklistApprovalAPI.processApprovalResponse(
        pendingApproval.checklist_id,
        manager.id,
        approved,
        `Resposta via WhatsApp: ${approved ? 'APROVADO' : 'REJEITADO'}`
      )

      console.log(`‚úÖ Aprova√ß√£o processada com sucesso: ${checklistCodigo} - ${approved ? 'APROVADO' : 'REJEITADO'}`)

      return {
        success: true,
        checklistCodigo,
        manager: manager.nome
      }

    } catch (error: any) {
      console.error('‚ùå Erro ao processar resposta de aprova√ß√£o:', error)
      return {
        success: false,
        error: error.message || 'Erro interno ao processar aprova√ß√£o'
      }
    }
  }

  /**
   * Formatar n√∫mero de telefone para busca no banco
   */
  private static formatPhoneForSearch(phoneNumber: string): string {
    // Remove caracteres n√£o num√©ricos
    let cleaned = phoneNumber.replace(/\D/g, '')
    
    // Remove c√≥digo do pa√≠s se presente
    if (cleaned.startsWith('55')) {
      cleaned = cleaned.substring(2)
    }
    
    // Garante que tenha 11 d√≠gitos (DDD + 9 d√≠gitos)
    if (cleaned.length === 10) {
      // Adiciona o 9 se n√£o tiver
      cleaned = cleaned.substring(0, 2) + '9' + cleaned.substring(2)
    }
    
    return cleaned
  }
}